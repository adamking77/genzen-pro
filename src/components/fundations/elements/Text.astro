---
export interface Props {
  tag?:
    | "a"
    | "p"
    | "em"
    | "span"
    | "small"
    | "strong"
    | "blockquote"
    | "h1"
    | "h2"
    | "h3"
    | "h4"
    | "h5"
    | "h6"; // Defines allowed HTML tags
  id?: string; // Optional 'id' attribute
  rel?: string; // Optional rel attribute for anchor tags
  style?: string; // Specifies inline styles
  target?: string; // Optional target attribute for links
  href?: string; // Optional 'href' attribute for anchor tags
  title?: string; // Optional title attribute for anchor tags
  variant?: string; // Specifies the style variant of the text
  class?: string; // Optional prop for additional custom classes
  ariaLabel?: string; // Optional aria-label attribute for anchor tags
}

// Define text styles for each variant
const textStyles: Record<string, string> = {
  display6XL: "text-[clamp(3rem,6vw,14rem)]",
  display5XL: "text-[clamp(3rem,5.5vw,12rem)]",
  display4XL: "text-[clamp(2.75rem,5vw,10rem)]",
  display3XL: "text-[clamp(2.5rem,4.5vw,9rem)]",
  display2XL: "text-[clamp(2.25rem,4vw,8rem)]",
  displayXL: "text-[clamp(2rem,3.5vw,7rem)]",
  displayLG: "text-[clamp(1.75rem,3vw,6rem)]",
  displayMD: "text-[clamp(1.5rem,2.5vw,5rem)]",
  displaySM: "text-[clamp(1.25rem,2vw,4rem)]",
  displayXS: "text-[clamp(1.125rem,1.75vw,3rem)]",
  textXL: "text-[clamp(1.25rem,1.5vw,1.75rem)]",
  textLG: "text-[clamp(1.125rem,1.25vw,1.5rem)]",
  textBase: "text-[clamp(1rem,1vw,1.125rem)]",
  textSM: "text-[clamp(0.875rem,0.875vw,0.875rem)]",
  textXS: "text-[clamp(0.75rem,0.75vw,0.75rem)]",
};

// Destructure props with default values
const {
  tag: Tag = "p", // Defaults to paragraph tag
  class: className = "", // No additional classes by default
  variant = "textBase", // Defaults to textMD style variant
  ...rest // Collect remaining props
} = Astro.props;

// Get the base classes for the specified variant
const baseClasses = textStyles[variant] || textStyles.textBase; // Fallback to textMD if variant not found

// Combine base classes with any additional custom classes
const combinedClasses = `${baseClasses} ${className}`.trim();
---

<Tag class={combinedClasses} {...rest}>
  <slot name="left-icon" />
  <slot />
  <slot name="right-icon" />
</Tag>
